package com.google.zetasql.toolkit.antipattern.parser.visitors;


import com.google.zetasql.parser.ASTNodes;
import com.google.zetasql.parser.ParseTreeVisitor;
import com.google.zetasql.toolkit.antipattern.util.ZetaSQLStringParsingHelper;

import java.util.ArrayList;
import java.util.HashMap;


public class IdentifySelfJoinVisitor extends ParseTreeVisitor {

    private final static String SELF_JOIN_SUGGESTION_MESSAGE= "Instead of using a self-join at line %s, use a window (analytic) function to reduce the number of additional bytes that are generated by the query.";
    private ArrayList<String> result = new ArrayList<>();
    private String query;
    public IdentifySelfJoinVisitor(String query) {
        this.query = query;
    }
    public HashMap<String, String > tableIdMap = new HashMap<>() ;
    String table;
    int lineNum;

/*    @Override
    public void visit(ASTNodes.ASTQuery query){
        System.out.println("Query - "+ query);
    }*/
    // Fetch the fromClause from query
    @Override
    public void visit(ASTNodes.ASTFromClause fromClause){
        if(fromClause.getTableExpression() instanceof ASTNodes.ASTTableExpression){
            traverseTableExpression(fromClause.getTableExpression(), null);
        }
    }

    // Traverse the tableExpression fetched from fromClause and look for sub-queries and join patterns
    public void traverseTableExpression(ASTNodes.ASTTableExpression tableExpression, String joinSide) {
        // if tableExpression directly contains tablePath fetch the tableNames from getIdentifier methods otherwise recursively look for it
//        System.out.println("TableExpression function");
        if(tableExpression instanceof ASTNodes.ASTTablePathExpression) {
//            System.out.println("TablePathExpression function");
            getIdentifier((ASTNodes.ASTTablePathExpression) tableExpression, joinSide);
            if(joinSide.equals("RHS")){
                System.out.println("======== Hashmap cleared ========");
                tableIdMap.clear();
            }
        }
        else if(tableExpression instanceof ASTNodes.ASTJoin){
//            System.out.println("Join function");
            traverseTableExpression(((ASTNodes.ASTJoin) tableExpression).getLhs(), "LHS");
            traverseTableExpression(((ASTNodes.ASTJoin) tableExpression).getRhs(), "RHS");
        }
        else if(tableExpression instanceof ASTNodes.ASTTableSubquery){
//            System.out.println("SubQuery function");
            ASTNodes.ASTQueryExpression queryExpression =  ((ASTNodes.ASTTableSubquery) tableExpression).getSubquery().getQueryExpr();
            if(queryExpression instanceof ASTNodes.ASTSelect)
            {
                ASTNodes.ASTTableExpression tableExpression1 =  ((ASTNodes.ASTSelect) queryExpression).getFromClause().getTableExpression();
                traverseTableExpression(tableExpression1, joinSide);
            }
        }


    }

    // Loop through all the identifiers in the table path expression.
    public void getIdentifier(ASTNodes.ASTTablePathExpression tablePathExpression, String joinSide) {
//        System.out.println("Table Path Expression ==> "+ tablePathExpression);
        tablePathExpression
                .getPathExpr()
                .getNames()
                .forEach(
                        identifier -> {
                            // Get the identifier as a string in lower case.
                            lineNum = ZetaSQLStringParsingHelper.countLine(query, identifier.getParseLocationRange().start());
                            table = identifier.getIdString().toLowerCase();
                            tableIdMap.put(joinSide,table);
                            System.out.println("Table Map - > " + tableIdMap);
                            System.out.println("==========================================");
                            System.out.println("Table -> " + table + " Join side " + joinSide + " line num " + lineNum);
                            System.out.println("Table Map - > " + tableIdMap);
                            System.out.println("==========================================");
                        });
        if(tableIdMap.get("LHS").equals(tableIdMap.get("RHS"))) {
            System.out.println("PATTERN DETECTED");
            System.out.println("Table Map - > " + tableIdMap);
            result.add(String.format(SELF_JOIN_SUGGESTION_MESSAGE, lineNum));
        }

    }

    // Return a result
    public ArrayList<String> getResult() {
        return result;
    }

}